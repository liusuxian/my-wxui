/*
 * @Author: liusuxian 382185882@qq.com
 * @Date: 2024-10-07 21:21:17
 * @LastEditors: liusuxian 382185882@qq.com
 * @LastEditTime: 2024-10-07 21:56:49
 * @Description:
 *
 * Copyright (c) 2024 by liusuxian email: 382185882@qq.com, All Rights Reserved.
 */
/**
 * 判断一个值是否为原始类型
 * @param {any} value - 要检查的值
 * @returns {boolean} - 如果值是原始类型则返回true，否则返回false
 */
function isPrimitive(value) {
  var type = typeof value;
  return (
    type === "boolean" ||
    type === "number" ||
    type === "string" ||
    type === "undefined" ||
    value === null
  );
}

/**
 * 调用函数，根据参数数量传递相应数量的参数
 * @param {Function} fn - 要调用的函数
 * @param {Array} args - 函数参数数组
 * @returns {any} - 函数调用的结果
 */
function call(fn, args) {
  if (args.length === 2) {
    return fn(args[0], args[1]);
  }

  if (args.length === 1) {
    return fn(args[0]);
  }

  return fn();
}

/**
 * 序列化函数参数，用于生成缓存键
 * @param {Array} args - 函数参数数组
 * @returns {string} - 序列化后的字符串，用作缓存键
 */
function serializer(args) {
  if (args.length === 1 && isPrimitive(args[0])) {
    return args[0];
  }
  var obj = {};
  for (var i = 0; i < args.length; i++) {
    obj["key" + i] = args[i];
  }
  return JSON.stringify(obj);
}

/**
 * 创建一个记忆化函数，用于缓存函数调用的结果
 * @param {Function} fn - 要记忆化的函数
 * @returns {Function} - 返回一个新的函数，该函数会缓存原函数的调用结果
 */
function memoize(fn) {
  var cache = {};

  return function () {
    var key = serializer(arguments);
    if (cache[key] === undefined) {
      cache[key] = call(fn, arguments);
    }

    return cache[key];
  };
}

module.exports = memoize;
